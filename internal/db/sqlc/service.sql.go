// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: service.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createService = `-- name: CreateService :one
INSERT INTO services (
  service_global_id,
  display_name,
  token_policy_config,
  token_policy_type
) VALUES (
  $1, $2, $3, $4
)
RETURNING service_id, service_global_id, display_name, token_policy_config, token_policy_type
`

type CreateServiceParams struct {
	ServiceGlobalID   pgtype.UUID `json:"service_global_id"`
	DisplayName       string      `json:"display_name"`
	TokenPolicyConfig string      `json:"token_policy_config"`
	TokenPolicyType   string      `json:"token_policy_type"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRow(ctx, createService,
		arg.ServiceGlobalID,
		arg.DisplayName,
		arg.TokenPolicyConfig,
		arg.TokenPolicyType,
	)
	var i Service
	err := row.Scan(
		&i.ServiceID,
		&i.ServiceGlobalID,
		&i.DisplayName,
		&i.TokenPolicyConfig,
		&i.TokenPolicyType,
	)
	return i, err
}

const findServiceByGlobalId = `-- name: FindServiceByGlobalId :one
SELECT service_id, service_global_id, display_name, token_policy_config, token_policy_type FROM services
WHERE service_global_id = $1
`

func (q *Queries) FindServiceByGlobalId(ctx context.Context, serviceGlobalID pgtype.UUID) (Service, error) {
	row := q.db.QueryRow(ctx, findServiceByGlobalId, serviceGlobalID)
	var i Service
	err := row.Scan(
		&i.ServiceID,
		&i.ServiceGlobalID,
		&i.DisplayName,
		&i.TokenPolicyConfig,
		&i.TokenPolicyType,
	)
	return i, err
}

const listServices = `-- name: ListServices :many
SELECT service_id, service_global_id, display_name, token_policy_config, token_policy_type FROM services
WHERE service_id >= $1
ORDER BY service_id
LIMIT $2
OFFSET $3
`

type ListServicesParams struct {
	ServiceID int64 `json:"service_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListServices(ctx context.Context, arg ListServicesParams) ([]Service, error) {
	rows, err := q.db.Query(ctx, listServices, arg.ServiceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ServiceID,
			&i.ServiceGlobalID,
			&i.DisplayName,
			&i.TokenPolicyConfig,
			&i.TokenPolicyType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryService = `-- name: QueryService :one
SELECT service_id, service_global_id, display_name, token_policy_config, token_policy_type FROM services
WHERE service_id = $1
`

func (q *Queries) QueryService(ctx context.Context, serviceID int64) (Service, error) {
	row := q.db.QueryRow(ctx, queryService, serviceID)
	var i Service
	err := row.Scan(
		&i.ServiceID,
		&i.ServiceGlobalID,
		&i.DisplayName,
		&i.TokenPolicyConfig,
		&i.TokenPolicyType,
	)
	return i, err
}

const removeService = `-- name: RemoveService :one
DELETE FROM services
WHERE service_id = $1
RETURNING service_id, service_global_id, display_name, token_policy_config, token_policy_type
`

func (q *Queries) RemoveService(ctx context.Context, serviceID int64) (Service, error) {
	row := q.db.QueryRow(ctx, removeService, serviceID)
	var i Service
	err := row.Scan(
		&i.ServiceID,
		&i.ServiceGlobalID,
		&i.DisplayName,
		&i.TokenPolicyConfig,
		&i.TokenPolicyType,
	)
	return i, err
}
