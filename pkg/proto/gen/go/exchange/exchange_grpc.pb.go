// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: exchange/exchange.proto

package exchange

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Exchange_Login_FullMethodName                     = "/exchange.prex.proto.Exchange/Login"
	Exchange_GetChallenge_FullMethodName              = "/exchange.prex.proto.Exchange/GetChallenge"
	Exchange_Deposit_FullMethodName                   = "/exchange.prex.proto.Exchange/Deposit"
	Exchange_PruneAccounts_FullMethodName             = "/exchange.prex.proto.Exchange/PruneAccounts"
	Exchange_CreateWithdraw_FullMethodName            = "/exchange.prex.proto.Exchange/CreateWithdraw"
	Exchange_GetWithdraw_FullMethodName               = "/exchange.prex.proto.Exchange/GetWithdraw"
	Exchange_CancelWithdraw_FullMethodName            = "/exchange.prex.proto.Exchange/CancelWithdraw"
	Exchange_BatchProcessWithdraws_FullMethodName     = "/exchange.prex.proto.Exchange/BatchProcessWithdraws"
	Exchange_BatchMarkWithdraws_FullMethodName        = "/exchange.prex.proto.Exchange/BatchMarkWithdraws"
	Exchange_CreateSellOrder_FullMethodName           = "/exchange.prex.proto.Exchange/CreateSellOrder"
	Exchange_DeleteSellOrder_FullMethodName           = "/exchange.prex.proto.Exchange/DeleteSellOrder"
	Exchange_MatchOrder_FullMethodName                = "/exchange.prex.proto.Exchange/MatchOrder"
	Exchange_BatchPruneFulfilledOrders_FullMethodName = "/exchange.prex.proto.Exchange/BatchPruneFulfilledOrders"
	Exchange_ClaimToken_FullMethodName                = "/exchange.prex.proto.Exchange/ClaimToken"
	Exchange_ClaimFreeToken_FullMethodName            = "/exchange.prex.proto.Exchange/ClaimFreeToken"
	Exchange_CreateService_FullMethodName             = "/exchange.prex.proto.Exchange/CreateService"
	Exchange_DeleteService_FullMethodName             = "/exchange.prex.proto.Exchange/DeleteService"
	Exchange_Ping_FullMethodName                      = "/exchange.prex.proto.Exchange/Ping"
	Exchange_ActivateQuotaToken_FullMethodName        = "/exchange.prex.proto.Exchange/ActivateQuotaToken"
	Exchange_ListServices_FullMethodName              = "/exchange.prex.proto.Exchange/ListServices"
	Exchange_ListPaymentMethods_FullMethodName        = "/exchange.prex.proto.Exchange/ListPaymentMethods"
	Exchange_ListFulfilledOrders_FullMethodName       = "/exchange.prex.proto.Exchange/ListFulfilledOrders"
)

// ExchangeClient is the client API for Exchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GetChallenge(ctx context.Context, in *GetChallengeRequest, opts ...grpc.CallOption) (*GetChallengeResponse, error)
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	PruneAccounts(ctx context.Context, in *PruneAccountsRequest, opts ...grpc.CallOption) (*PruneAccountsResponse, error)
	CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...grpc.CallOption) (*Withdrawal, error)
	GetWithdraw(ctx context.Context, in *GetWithdrawRequest, opts ...grpc.CallOption) (*Withdrawal, error)
	CancelWithdraw(ctx context.Context, in *CancelWithdrawRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BatchProcessWithdraws(ctx context.Context, in *BatchProcessWithdrawsRequest, opts ...grpc.CallOption) (*BatchProcessWithdrawsResponse, error)
	BatchMarkWithdraws(ctx context.Context, in *BatchMarkWithdrawsRequest, opts ...grpc.CallOption) (*BatchMarkWithdrawsResponse, error)
	CreateSellOrder(ctx context.Context, in *CreateSellOrderRequest, opts ...grpc.CallOption) (*CreateSellOrderResponse, error)
	DeleteSellOrder(ctx context.Context, in *DeleteSellOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MatchOrder(ctx context.Context, in *MatchOrderRequest, opts ...grpc.CallOption) (*MatchOrderResponse, error)
	BatchPruneFulfilledOrders(ctx context.Context, in *BatchPruneFulfilledOrdersRequest, opts ...grpc.CallOption) (*BatchPruneFulfilledOrdersResponse, error)
	ClaimToken(ctx context.Context, in *ClaimTokenRequest, opts ...grpc.CallOption) (*ClaimTokenResponse, error)
	ClaimFreeToken(ctx context.Context, in *ClaimTokenRequest, opts ...grpc.CallOption) (*ClaimTokenResponse, error)
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	ActivateQuotaToken(ctx context.Context, in *ActivateQuotaTokenRequest, opts ...grpc.CallOption) (*ActivateQuotaTokenResponse, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsRequest, opts ...grpc.CallOption) (*ListPaymentMethodsResponse, error)
	ListFulfilledOrders(ctx context.Context, in *ListFulfilledOrdersRequest, opts ...grpc.CallOption) (*ListFulfilledOrdersResponse, error)
}

type exchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeClient(cc grpc.ClientConnInterface) ExchangeClient {
	return &exchangeClient{cc}
}

func (c *exchangeClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Exchange_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetChallenge(ctx context.Context, in *GetChallengeRequest, opts ...grpc.CallOption) (*GetChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChallengeResponse)
	err := c.cc.Invoke(ctx, Exchange_GetChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, Exchange_Deposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) PruneAccounts(ctx context.Context, in *PruneAccountsRequest, opts ...grpc.CallOption) (*PruneAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PruneAccountsResponse)
	err := c.cc.Invoke(ctx, Exchange_PruneAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...grpc.CallOption) (*Withdrawal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Withdrawal)
	err := c.cc.Invoke(ctx, Exchange_CreateWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetWithdraw(ctx context.Context, in *GetWithdrawRequest, opts ...grpc.CallOption) (*Withdrawal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Withdrawal)
	err := c.cc.Invoke(ctx, Exchange_GetWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) CancelWithdraw(ctx context.Context, in *CancelWithdrawRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Exchange_CancelWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) BatchProcessWithdraws(ctx context.Context, in *BatchProcessWithdrawsRequest, opts ...grpc.CallOption) (*BatchProcessWithdrawsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchProcessWithdrawsResponse)
	err := c.cc.Invoke(ctx, Exchange_BatchProcessWithdraws_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) BatchMarkWithdraws(ctx context.Context, in *BatchMarkWithdrawsRequest, opts ...grpc.CallOption) (*BatchMarkWithdrawsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchMarkWithdrawsResponse)
	err := c.cc.Invoke(ctx, Exchange_BatchMarkWithdraws_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) CreateSellOrder(ctx context.Context, in *CreateSellOrderRequest, opts ...grpc.CallOption) (*CreateSellOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSellOrderResponse)
	err := c.cc.Invoke(ctx, Exchange_CreateSellOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) DeleteSellOrder(ctx context.Context, in *DeleteSellOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Exchange_DeleteSellOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) MatchOrder(ctx context.Context, in *MatchOrderRequest, opts ...grpc.CallOption) (*MatchOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchOrderResponse)
	err := c.cc.Invoke(ctx, Exchange_MatchOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) BatchPruneFulfilledOrders(ctx context.Context, in *BatchPruneFulfilledOrdersRequest, opts ...grpc.CallOption) (*BatchPruneFulfilledOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchPruneFulfilledOrdersResponse)
	err := c.cc.Invoke(ctx, Exchange_BatchPruneFulfilledOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) ClaimToken(ctx context.Context, in *ClaimTokenRequest, opts ...grpc.CallOption) (*ClaimTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimTokenResponse)
	err := c.cc.Invoke(ctx, Exchange_ClaimToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) ClaimFreeToken(ctx context.Context, in *ClaimTokenRequest, opts ...grpc.CallOption) (*ClaimTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimTokenResponse)
	err := c.cc.Invoke(ctx, Exchange_ClaimFreeToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, Exchange_CreateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Exchange_DeleteService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Exchange_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) ActivateQuotaToken(ctx context.Context, in *ActivateQuotaTokenRequest, opts ...grpc.CallOption) (*ActivateQuotaTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateQuotaTokenResponse)
	err := c.cc.Invoke(ctx, Exchange_ActivateQuotaToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, Exchange_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsRequest, opts ...grpc.CallOption) (*ListPaymentMethodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPaymentMethodsResponse)
	err := c.cc.Invoke(ctx, Exchange_ListPaymentMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) ListFulfilledOrders(ctx context.Context, in *ListFulfilledOrdersRequest, opts ...grpc.CallOption) (*ListFulfilledOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFulfilledOrdersResponse)
	err := c.cc.Invoke(ctx, Exchange_ListFulfilledOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServer is the server API for Exchange service.
// All implementations must embed UnimplementedExchangeServer
// for forward compatibility.
type ExchangeServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	GetChallenge(context.Context, *GetChallengeRequest) (*GetChallengeResponse, error)
	Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	PruneAccounts(context.Context, *PruneAccountsRequest) (*PruneAccountsResponse, error)
	CreateWithdraw(context.Context, *CreateWithdrawRequest) (*Withdrawal, error)
	GetWithdraw(context.Context, *GetWithdrawRequest) (*Withdrawal, error)
	CancelWithdraw(context.Context, *CancelWithdrawRequest) (*emptypb.Empty, error)
	BatchProcessWithdraws(context.Context, *BatchProcessWithdrawsRequest) (*BatchProcessWithdrawsResponse, error)
	BatchMarkWithdraws(context.Context, *BatchMarkWithdrawsRequest) (*BatchMarkWithdrawsResponse, error)
	CreateSellOrder(context.Context, *CreateSellOrderRequest) (*CreateSellOrderResponse, error)
	DeleteSellOrder(context.Context, *DeleteSellOrderRequest) (*emptypb.Empty, error)
	MatchOrder(context.Context, *MatchOrderRequest) (*MatchOrderResponse, error)
	BatchPruneFulfilledOrders(context.Context, *BatchPruneFulfilledOrdersRequest) (*BatchPruneFulfilledOrdersResponse, error)
	ClaimToken(context.Context, *ClaimTokenRequest) (*ClaimTokenResponse, error)
	ClaimFreeToken(context.Context, *ClaimTokenRequest) (*ClaimTokenResponse, error)
	CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error)
	DeleteService(context.Context, *DeleteServiceRequest) (*emptypb.Empty, error)
	Ping(context.Context, *emptypb.Empty) (*PingResponse, error)
	ActivateQuotaToken(context.Context, *ActivateQuotaTokenRequest) (*ActivateQuotaTokenResponse, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	ListPaymentMethods(context.Context, *ListPaymentMethodsRequest) (*ListPaymentMethodsResponse, error)
	ListFulfilledOrders(context.Context, *ListFulfilledOrdersRequest) (*ListFulfilledOrdersResponse, error)
	mustEmbedUnimplementedExchangeServer()
}

// UnimplementedExchangeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExchangeServer struct{}

func (UnimplementedExchangeServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedExchangeServer) GetChallenge(context.Context, *GetChallengeRequest) (*GetChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallenge not implemented")
}
func (UnimplementedExchangeServer) Deposit(context.Context, *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedExchangeServer) PruneAccounts(context.Context, *PruneAccountsRequest) (*PruneAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneAccounts not implemented")
}
func (UnimplementedExchangeServer) CreateWithdraw(context.Context, *CreateWithdrawRequest) (*Withdrawal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdraw not implemented")
}
func (UnimplementedExchangeServer) GetWithdraw(context.Context, *GetWithdrawRequest) (*Withdrawal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdraw not implemented")
}
func (UnimplementedExchangeServer) CancelWithdraw(context.Context, *CancelWithdrawRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWithdraw not implemented")
}
func (UnimplementedExchangeServer) BatchProcessWithdraws(context.Context, *BatchProcessWithdrawsRequest) (*BatchProcessWithdrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchProcessWithdraws not implemented")
}
func (UnimplementedExchangeServer) BatchMarkWithdraws(context.Context, *BatchMarkWithdrawsRequest) (*BatchMarkWithdrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchMarkWithdraws not implemented")
}
func (UnimplementedExchangeServer) CreateSellOrder(context.Context, *CreateSellOrderRequest) (*CreateSellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSellOrder not implemented")
}
func (UnimplementedExchangeServer) DeleteSellOrder(context.Context, *DeleteSellOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSellOrder not implemented")
}
func (UnimplementedExchangeServer) MatchOrder(context.Context, *MatchOrderRequest) (*MatchOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchOrder not implemented")
}
func (UnimplementedExchangeServer) BatchPruneFulfilledOrders(context.Context, *BatchPruneFulfilledOrdersRequest) (*BatchPruneFulfilledOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchPruneFulfilledOrders not implemented")
}
func (UnimplementedExchangeServer) ClaimToken(context.Context, *ClaimTokenRequest) (*ClaimTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimToken not implemented")
}
func (UnimplementedExchangeServer) ClaimFreeToken(context.Context, *ClaimTokenRequest) (*ClaimTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimFreeToken not implemented")
}
func (UnimplementedExchangeServer) CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedExchangeServer) DeleteService(context.Context, *DeleteServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedExchangeServer) Ping(context.Context, *emptypb.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedExchangeServer) ActivateQuotaToken(context.Context, *ActivateQuotaTokenRequest) (*ActivateQuotaTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateQuotaToken not implemented")
}
func (UnimplementedExchangeServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedExchangeServer) ListPaymentMethods(context.Context, *ListPaymentMethodsRequest) (*ListPaymentMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentMethods not implemented")
}
func (UnimplementedExchangeServer) ListFulfilledOrders(context.Context, *ListFulfilledOrdersRequest) (*ListFulfilledOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFulfilledOrders not implemented")
}
func (UnimplementedExchangeServer) mustEmbedUnimplementedExchangeServer() {}
func (UnimplementedExchangeServer) testEmbeddedByValue()                  {}

// UnsafeExchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeServer will
// result in compilation errors.
type UnsafeExchangeServer interface {
	mustEmbedUnimplementedExchangeServer()
}

func RegisterExchangeServer(s grpc.ServiceRegistrar, srv ExchangeServer) {
	// If the following call pancis, it indicates UnimplementedExchangeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Exchange_ServiceDesc, srv)
}

func _Exchange_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_GetChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetChallenge(ctx, req.(*GetChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_Deposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_PruneAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).PruneAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_PruneAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).PruneAccounts(ctx, req.(*PruneAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_CreateWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).CreateWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_CreateWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).CreateWithdraw(ctx, req.(*CreateWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_GetWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetWithdraw(ctx, req.(*GetWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_CancelWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).CancelWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_CancelWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).CancelWithdraw(ctx, req.(*CancelWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_BatchProcessWithdraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchProcessWithdrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).BatchProcessWithdraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_BatchProcessWithdraws_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).BatchProcessWithdraws(ctx, req.(*BatchProcessWithdrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_BatchMarkWithdraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchMarkWithdrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).BatchMarkWithdraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_BatchMarkWithdraws_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).BatchMarkWithdraws(ctx, req.(*BatchMarkWithdrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_CreateSellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSellOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).CreateSellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_CreateSellOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).CreateSellOrder(ctx, req.(*CreateSellOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_DeleteSellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSellOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).DeleteSellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_DeleteSellOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).DeleteSellOrder(ctx, req.(*DeleteSellOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_MatchOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).MatchOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_MatchOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).MatchOrder(ctx, req.(*MatchOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_BatchPruneFulfilledOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchPruneFulfilledOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).BatchPruneFulfilledOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_BatchPruneFulfilledOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).BatchPruneFulfilledOrders(ctx, req.(*BatchPruneFulfilledOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_ClaimToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).ClaimToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_ClaimToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).ClaimToken(ctx, req.(*ClaimTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_ClaimFreeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).ClaimFreeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_ClaimFreeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).ClaimFreeToken(ctx, req.(*ClaimTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_ActivateQuotaToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateQuotaTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).ActivateQuotaToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_ActivateQuotaToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).ActivateQuotaToken(ctx, req.(*ActivateQuotaTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_ListPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).ListPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_ListPaymentMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).ListPaymentMethods(ctx, req.(*ListPaymentMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_ListFulfilledOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFulfilledOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).ListFulfilledOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_ListFulfilledOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).ListFulfilledOrders(ctx, req.(*ListFulfilledOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Exchange_ServiceDesc is the grpc.ServiceDesc for Exchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange.prex.proto.Exchange",
	HandlerType: (*ExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Exchange_Login_Handler,
		},
		{
			MethodName: "GetChallenge",
			Handler:    _Exchange_GetChallenge_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Exchange_Deposit_Handler,
		},
		{
			MethodName: "PruneAccounts",
			Handler:    _Exchange_PruneAccounts_Handler,
		},
		{
			MethodName: "CreateWithdraw",
			Handler:    _Exchange_CreateWithdraw_Handler,
		},
		{
			MethodName: "GetWithdraw",
			Handler:    _Exchange_GetWithdraw_Handler,
		},
		{
			MethodName: "CancelWithdraw",
			Handler:    _Exchange_CancelWithdraw_Handler,
		},
		{
			MethodName: "BatchProcessWithdraws",
			Handler:    _Exchange_BatchProcessWithdraws_Handler,
		},
		{
			MethodName: "BatchMarkWithdraws",
			Handler:    _Exchange_BatchMarkWithdraws_Handler,
		},
		{
			MethodName: "CreateSellOrder",
			Handler:    _Exchange_CreateSellOrder_Handler,
		},
		{
			MethodName: "DeleteSellOrder",
			Handler:    _Exchange_DeleteSellOrder_Handler,
		},
		{
			MethodName: "MatchOrder",
			Handler:    _Exchange_MatchOrder_Handler,
		},
		{
			MethodName: "BatchPruneFulfilledOrders",
			Handler:    _Exchange_BatchPruneFulfilledOrders_Handler,
		},
		{
			MethodName: "ClaimToken",
			Handler:    _Exchange_ClaimToken_Handler,
		},
		{
			MethodName: "ClaimFreeToken",
			Handler:    _Exchange_ClaimFreeToken_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _Exchange_CreateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Exchange_DeleteService_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Exchange_Ping_Handler,
		},
		{
			MethodName: "ActivateQuotaToken",
			Handler:    _Exchange_ActivateQuotaToken_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _Exchange_ListServices_Handler,
		},
		{
			MethodName: "ListPaymentMethods",
			Handler:    _Exchange_ListPaymentMethods_Handler,
		},
		{
			MethodName: "ListFulfilledOrders",
			Handler:    _Exchange_ListFulfilledOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exchange/exchange.proto",
}
