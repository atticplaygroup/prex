syntax = "proto3";

option go_package = "github.com/atticplaygroup/prex/proto/exchange";

import "google/api/annotations.proto";
import "google/api/http.proto";
import "google/api/client.proto";
import "google/api/resource.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

package exchange.prex.proto;

service Exchange {
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/login"
      body: "*"
    };
  }

  rpc GetChallenge(GetChallengeRequest) returns (GetChallengeResponse) {
    option (google.api.http) = {
      get: "/v1/challenge"
    };
    option (google.api.method_signature) = "address";
  }

  rpc Deposit(DepositRequest) returns (DepositResponse) {
    option (google.api.http) = {
      post: "/v1/deposit"
      body: "*"
    };
  }

  rpc PruneAccounts(PruneAccountsRequest) returns (PruneAccountsResponse) {
    option (google.api.http) = {
      post: "/v1/accounts:prune"
      body: "*"
    };
  }

  rpc CreateWithdraw(CreateWithdrawRequest) returns (Withdrawal) {
    option (google.api.http) = {
      post: "/v1/{parent=accounts/*}/withdraws:create"
      body: "withdrawal"
    };
    option (google.api.method_signature) = "parent,withdrawal";
  }

  rpc GetWithdraw(GetWithdrawRequest) returns (Withdrawal) {
    option (google.api.http) = {
      get: "/v1/{name=accounts/*/withdraws/*}"
    };
    option (google.api.method_signature) = "name";    
  }

  rpc CancelWithdraw(CancelWithdrawRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/{name=accounts/*/withdraws/*}:cancel"
      body: "*"
    };
    option (google.api.method_signature) = "name";
  }

  rpc BatchProcessWithdraws(BatchProcessWithdrawsRequest) returns (BatchProcessWithdrawsResponse) {
    option (google.api.http) = {
      post: "/v1/withdraws:batchProcess"
      body: "*"
    };
    option (google.api.method_signature) = "limit";
  }

  rpc BatchMarkWithdraws(BatchMarkWithdrawsRequest) returns (BatchMarkWithdrawsResponse) {
    option (google.api.http) = {
      post: "/v1/withdraws:batchMark"
      body: "*"
    };
    option (google.api.method_signature) = "limit";
  }

  rpc CreateSellOrder(CreateSellOrderRequest) returns (CreateSellOrderResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*}/sell-orders:create"
      body: "*"
    };
    option (google.api.method_signature) = "parent,account_id,sell_order,ttl";
  }

  rpc DeleteSellOrder(DeleteSellOrderRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=services/*/sell-orders/*}"
    };
    option (google.api.method_signature) = "name,account_id";
  }

  rpc MatchOrder(MatchOrderRequest) returns (MatchOrderResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*}/sell-orders:match"
      body: "*"
    };
    option (google.api.method_signature) = "parent,account_id,bid_price,min_expire_time,quantity";
  }

  rpc BatchPruneFulfilledOrders(
    BatchPruneFulfilledOrdersRequest
  ) returns (BatchPruneFulfilledOrdersResponse) {
    option (google.api.http) = {
      post: "/v1/fulfilled-orders:prune"
      body: "*"
    };
    option (google.api.method_signature) = "";
  }

  rpc ClaimToken(ClaimTokenRequest) returns (ClaimTokenResponse) {
    option (google.api.http) = {
      post: "/v1/{name=services/*/fulfilled-orders/*}:claim"
      body: "*"
    };
    option (google.api.method_signature) = "name,audience,arg_json";
  }

  rpc ClaimFreeToken(ClaimTokenRequest) returns (ClaimTokenResponse) {
    option (google.api.http) = {
      post: "/v1/{name=services/*/fulfilled-orders/*}:claimFree"
      body: "*"
    };
    option (google.api.method_signature) = "name,audience,arg_json";
  }

  rpc CreateService(CreateServiceRequest) returns (CreateServiceResponse) {
    option (google.api.http) = {
      post: "/v1/services:create"
      body: "service"
    };
    option (google.api.method_signature) = "token_policy,global_id,display_name";
  }

  rpc DeleteService(DeleteServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=services/*}:delete"
    };
    option (google.api.method_signature) = "name";
  }

  rpc Ping(google.protobuf.Empty) returns (PingResponse) {
    option (google.api.http) = {
      get: "/v1/ping"
    };
    option (google.api.method_signature) = "";
  }

  rpc ActivateQuotaToken(ActivateQuotaTokenRequest) returns (ActivateQuotaTokenResponse) {
    option (google.api.http) = {
      post: "/v1/quota-token:activate"
      body: "*"
    };
    option (google.api.method_signature) = "";
  }

  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      get: "/v1/services"
    };
    option (google.api.method_signature) = "";
  }

  rpc ListPaymentMethods(ListPaymentMethodsRequest) returns (ListPaymentMethodsResponse) {
    option (google.api.http) = {
      get: "/v1/payment-methods"
    };
    option (google.api.method_signature) = "";
  }

  rpc ListFulfilledOrders(ListFulfilledOrdersRequest) returns (ListFulfilledOrdersResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=services/*}/fulfilled-orders"
    };
    option (google.api.method_signature) = "parent";
  }
}

message ListFulfilledOrdersRequest {
  string parent = 1;
  int64 account_id = 2;
  int32 page_size = 3;
  int32 skip = 4;
  string page_token = 5;
  int64 min_remaining_quantity = 6;
}

message ListFulfilledOrdersResponse {
  repeated FulfilledOrder fulfilled_orders = 1;
  string next_page_token = 2;
}

message ListPaymentMethodsRequest {
}

message ListPaymentMethodsResponse {
  repeated PaymentMethod payment_methods = 1;
}

enum PaymentCoin {
  UNKNOWN_COIN = 0;
  SUI = 1;
}

enum PaymentEnvironment {
  UNKNOWN_ENVIRONMENT = 0;
  MAINNET = 1;
  DEVNET  = 2;
  TESTNET = 3;
}

message PaymentMethod {
  string name = 1;
  PaymentCoin coin = 2;
  PaymentEnvironment environment = 3;
  string address = 4;
}

message ListServicesRequest {
  int32 page_size = 1;
  int32 skip = 2;
  string page_token = 3;
}

message ListServicesResponse {
  repeated Service services = 1;
  string next_page_token = 2;
}

message ActivateQuotaTokenRequest {
  // string token = 1;
  int64 service_id = 2;
  int64 order_claim_id = 3;
  int64 quota_quantity = 4;
  google.protobuf.Timestamp expire_at = 5;
}

message ActivateQuotaTokenResponse {
  bool success = 1;
}

message PingResponse {
  string pong = 1;
}

message DeleteServiceRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// enum TokenPolicyType {
//   KProductTokenPolicy = 0;
// }

message ProductTokenPolicy {
  // TokenPolicyType token_policy_type = 1;
  int64 unit_price = 2;
}

message Service {
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];
  oneof token_policy {
    ProductTokenPolicy product_token_policy = 2;
  };
  string global_id = 3;
  string display_name = 4;
}

message CreateServiceRequest {
  Service service = 1;
}

message CreateServiceResponse {
  Service service = 1;
}

message ClaimTokenRequest {
  string name = 1;
  int64 account_id = 2;
  // TODO: audience should not be a user given variable. Should be seller given
  string audience = 3;
  string arg_json = 4;
}

message ClaimTokenResponse {
  string name = 1;
  string token = 2;
}

message BatchPruneFulfilledOrdersRequest {
}

message BatchPruneFulfilledOrdersResponse {
  int64 sell_orders_cleaned = 1;
  int64 fulfilled_orders_cleaned = 2;
}

message FulfilledOrder {
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];
  int64 service_id = 2;
  int64 sell_order_id = 3;
  int64 buyer_id = 4;
  int64 seller_id = 5;
  int64 deal_price = 6;
  int64 deal_quantity = 7;
  google.protobuf.Timestamp deal_time = 8;
  int64 remaining_quantity = 9;
  google.protobuf.Timestamp service_expire_time = 10;
}

message MatchOrderRequest {
  string parent = 1;
  int64 account_id = 2;
  int64 bid_price = 3;
  google.protobuf.Timestamp min_expire_time = 4;
  int64 quantity = 5;
  // TODO: support filtering sellers based on tags or a list
}

message MatchOrderResponse {
  FulfilledOrder fulfilled_order = 1;
}

message DeleteSellOrderRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  int64 account_id = 2;
}

message SellOrder {
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];
  int64 seller_id = 2;
  int64 service_id = 3;
  int64 ask_price = 4;
  int64 quantity = 5;
  google.protobuf.Timestamp order_expire_time = 6;
  google.protobuf.Timestamp service_expire_time = 7;
}

message CreateSellOrderRequest {
  string parent = 1;
  int64 account_id = 2;
  SellOrder sell_order = 3;
}

message CreateSellOrderResponse {
  SellOrder sell_order = 1;
}

message BatchMarkWithdrawsRequest {
  int32 limit = 1; 
}

message BatchMarkWithdrawsResponse {
  repeated int64 success_withdraw_ids = 1;
}

message BatchProcessWithdrawsRequest {
  int32 limit = 1;
}

message BatchProcessWithdrawsResponse {
  string digest = 1;
  int64 batch_size = 2;
}

message CancelWithdrawRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetWithdrawRequest {
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];
}

message Withdrawal {
  option (google.api.resource) = {
    type: "github.com/atticplaygroup/prex/proto/exchange/Withdrawal"
    pattern: "accounts/{account}/withdrawals/{withdrawal}"
  };
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];
  string address_to = 2;
  int64 amount = 3;
  int64 priority_fee = 4;
}

message CreateWithdrawRequest {
  string parent = 1 [(google.api.field_behavior) = REQUIRED];
  Withdrawal withdrawal = 2 [(google.api.field_behavior) = REQUIRED];
  bool withdraw_all = 3;
}

message PruneAccountsRequest {
}

message PruneAccountsResponse {
  repeated Account accounts = 1;
}

message SuiDepositProof {
  string chain_digest = 1;
  google.protobuf.Timestamp start_time = 2;
  bytes challenge = 3;
  string signature = 4;
}

message DepositRequest {
  string username = 1;
  string password = 2;
  google.protobuf.Duration ttl = 3;
  SuiDepositProof proof = 4;
}

message DepositResponse {
  Account account = 1;
}

message GetChallengeRequest {
  string address = 1;
}

message GetChallengeResponse {
  bytes challenge = 1;
  google.protobuf.Timestamp start_time = 2;
}

message Account {
  option (google.api.resource) = {
    type: "github.com/atticplaygroup/prex/proto/exchange/Account"
    pattern: "accounts/{account}"
  };
  string name = 1  [(google.api.field_behavior) = IDENTIFIER];
  int64 account_id = 2;
  string username = 3;
  google.protobuf.Timestamp expire_time = 4;
  int64 balance = 5;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  Account account = 1;
  string access_token = 2;
}
